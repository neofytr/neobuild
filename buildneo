#!/bin/bash

# check if a .c file is provided as an argument
if [ "$#" -ne 1 ]; then
    echo "Usage: $0 <source_file.c>"
    exit 1
fi

SOURCE_FILE="$1"
OUTPUT_FILE="${SOURCE_FILE%.c}"

# determine the C compiler
if command -v gcc &>/dev/null; then
    CC=gcc
elif command -v clang &>/dev/null; then
    CC=clang
else
    echo "Error: No GCC or Clang compiler found."
    exit 1
fi

echo "Using compiler: $CC"

# ensure directories exist
mkdir -p release/strix/binaries
mkdir -p release/dynarr/binaries
mkdir -p release

# check and build strix.o if necessary
STRIX_SRC="strix/source/main.c"
STRIX_OBJ="release/strix/binaries/strix.o"

if [ ! -f "$STRIX_OBJ" ] || [ "$STRIX_SRC" -nt "$STRIX_OBJ" ]; then
    echo "Compiling strix.o"
    $CC -c "$STRIX_SRC" -o "$STRIX_OBJ" -O3 -march=native
    if [ $? -ne 0 ]; then
        echo "Failed to compile strix.o"
        exit 1
    fi
fi

# check and build dynarr.o if necessary
DYNARR_SRC="release/dynarr/src/dynarr.c"
DYNARR_OBJ="release/dynarr/binaries/dynarr.o"

if [ ! -f "$DYNARR_OBJ" ] || [ "$DYNARR_SRC" -nt "$DYNARR_OBJ" ]; then
    echo "Compiling dynarr.o"
    $CC -c "$DYNARR_SRC" -o "$DYNARR_OBJ" -O3 -march=native
    if [ $? -ne 0 ]; then
        echo "Failed to compile dynarr.o"
        exit 1
    fi
fi

# check and build neobuild.o if necessary
NEOBUILD_SRC="release/neobuild.c"
NEOBUILD_OBJ="release/neobuild.o"

if [ ! -f "$NEOBUILD_OBJ" ] || [ "$NEOBUILD_SRC" -nt "$NEOBUILD_OBJ" ]; then
    echo "Compiling neobuild.o"
    $CC -c "$NEOBUILD_SRC" -o "$NEOBUILD_OBJ" -O3 -march=native
    if [ $? -ne 0 ]; then
        echo "Failed to compile neobuild.o"
        exit 1
    fi
fi

# compile the provided .c file
echo "Compiling $SOURCE_FILE"
$CC "$SOURCE_FILE" "$STRIX_OBJ" "$DYNARR_OBJ" "$NEOBUILD_OBJ" -o "$OUTPUT_FILE" -lm -O3 -march=native

if [ $? -eq 0 ]; then
    echo "Compilation successful: $OUTPUT_FILE"
else
    echo "Compilation failed."
    exit 1
fi
